name: "dyups Deploy"
description: "Deploy site with dyups"
inputs:
  ssh-host:
    description: "SSH HOST"
    required: true
  ssh-port:
    description: "SSH Port"
    required: true
  ssh-username:
    description: "SSH Username"
    required: true
  ssh-key:
    description: "SSH private key"
    required: true
  image:
    description: "Docker image name and tag"
    required: true
  container-name:
    description: "Docker container name, default is dyups-$domain"
    required: false
    default: ""
  container-port:
    description: "Docker container port, default is 8080"
    required: false
    default: "8080"
  domain:
    description: "Deployed domain name"
    required: true
  dyups-server:
    description: "dyups service domain name"
    default: "https://dyups.xuexb.com"
    required: false
  dyups-token:
    description: "dyups service token"
    required: true
  dyups-try-count:
    description: "Number of retries on dyups error"
    required: false
    default: "5"
  docker-run:
    description: "Docker run command"
    required: false
    default: ""
  env-list:
    description: "ENV list"
    required: false
    default: ""
  proxy-host:
    description: "SSH Porxy HOST"
    required: false
    default: "sg01.ddns.xuexb.com"
  proxy-port:
    description: "SSH Porxy Port"
    required: false
    default: "22"
  proxy-username:
    description: "SSH Porxy Username"
    required: false
    default: "duke"
runs:
  using: "composite"
  steps:
    - name: Install SSH KEY
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ inputs.ssh-key }} 
        known_hosts: unnecessary
        if_key_exists: replace
    - name: Generate deployment scripts
      shell: bash
      run: |
        if [ "$RUNNER_DEBUG" == "1" ]; then
          echo '#!/bin/bash
          echo "${{ inputs.env-list }}" > /tmp/.env.list
          container_name="${{ inputs.container-name }}"
          if [ "$container_name" == "" ]; then container_name="dyups-${{ inputs.domain }}"; fi
          docker_run="${{ inputs.docker-run }}"
          docker_run_default='\''docker run -p ${{ inputs.container-port }} --env-file /tmp/.env.list --restart=always -d --name "$container_name" ${{ inputs.image }}'\''
          if [ "$docker_run" == "" ]; then docker_run=$docker_run_default; fi
          docker pull ${{ inputs.image }} \
            && (docker ps -aq --filter "name=$container_name" | xargs docker rm -f || echo "Delete fail") \
            && eval $docker_run \
            && rm /tmp/.env.list \
            && ip=$(curl -s --max-time 5 ifconfig.me) \
            && port=$(docker ps --filter "name=$container_name" --format "{{.Ports}}" -a | awk -F ":" "{print \$2}" | awk -F "->" "{print \$1}") \
            && if [ "$ip" == "" ]; then exit 10; fi \
            && if [ "$port" == "" ]; then exit 11; fi \
            && echo "{\"address\":\"$ip\",\"port\":$port}"
          ' > /tmp/agent.sh
        else
          echo '#!/bin/bash
          echo "${{ inputs.env-list }}" > /tmp/.env.list
          container_name="${{ inputs.container-name }}"
          if [ "$container_name" == "" ]; then container_name="dyups-${{ inputs.domain }}"; fi
          docker_run="${{ inputs.docker-run }}"
          docker_run_default='\''docker run -p ${{ inputs.container-port }} --env-file /tmp/.env.list --restart=always -d --name "$container_name" ${{ inputs.image }}'\''
          if [ "$docker_run" == "" ]; then docker_run=$docker_run_default; fi
          docker pull ${{ inputs.image }} > /dev/null 2>&1 \
            && (docker ps -aq --filter "name=$container_name" | xargs docker rm -f || echo "Delete fail") > /dev/null 2>&1 \
            && eval $docker_run > /dev/null 2>&1 \
            && rm /tmp/.env.list \
            && ip=$(curl -s --max-time 5 ifconfig.me) \
            && port=$(docker ps --filter "name=$container_name" --format "{{.Ports}}" -a | awk -F ":" "{print \$2}" | awk -F "->" "{print \$1}") \
            && if [ "$ip" == "" ]; then exit 10; fi \
            && if [ "$port" == "" ]; then exit 11; fi \
            && echo "{\"address\":\"$ip\",\"port\":$port}"
          ' > /tmp/agent.sh
        fi
        if [ "$RUNNER_DEBUG" == "1" ]; then
          cat /tmp/agent.sh
        fi
    - name: Deploy on a remote machine
      id: deploy
      shell: bash
      run: |
        host=${{ inputs.ssh-host }}
        hosts=(${host//,/ })
        result=""
        for key in "${hosts[@]}"; do
          if [ "$RUNNER_DEBUG" == "1" ]; then
            ssh -p ${{ inputs.ssh-port }} -o StrictHostKeyChecking=no -o ProxyCommand="ssh -p ${{ inputs.proxy-port }} -o StrictHostKeyChecking=no -W %h:%p ${{ inputs.proxy-username }}@${{ inputs.proxy-host }}" "${{ inputs.ssh-username }}@$key" pwd
          fi
          res=$(ssh -p ${{ inputs.ssh-port }} -o StrictHostKeyChecking=no -o ProxyCommand="ssh -p ${{ inputs.proxy-port }} -o StrictHostKeyChecking=no -W %h:%p ${{ inputs.proxy-username }}@${{ inputs.proxy-host }}" "${{ inputs.ssh-username }}@$key" 'bash -s' < /tmp/agent.sh)
          code=$?
          if [ "$RUNNER_DEBUG" == "1" ]; then
            echo "code=$code , res=$res"
          fi
          if [ "$code" != "0" ]; then
            echo "$key 部署失败，状态码：$code ，信息：$res"
          else
            if [ "$result" == "" ]; then
              result="$res"
            else
              result="$result,$res"
            fi
          fi
        done
        rm -rf /tmp/agent.sh
        if [ "$RUNNER_DEBUG" == "1" ]; then
          exit 16
        fi
        if [ "$result" == "" ]; then
          echo "没有部署成功"
          exit 13
        fi
        result="[$result]"
        echo "::set-output name=result::$result"
    - name: Register a dyups domain name
      shell: bash
      run: |
          # 注册 dyups ，会自动同步
          dyupsurl="${{ inputs.dyups-server }}/api/${{ inputs.domain }}?r=$RANDOM"
          dyups_result=""
          for((i=1;i<=${{ inputs.dyups-try-count }};i++)); do
            httpcode=$(curl -sL -w '%{http_code}' -H 'x-dyups-token: ${{ inputs.dyups-token }}' -X POST -d '${{ steps.deploy.outputs.result }}' $dyupsurl -o /dev/null)
            if [ "$httpcode" != "200" ]; then
              echo "注册 dyups 失败，响应码：$httpcode ，继续尝试"
              dyups_result="0"
            else
              echo "注册 dyups 成功"
              dyups_result="1"
              break
            fi
          done
          if [ "$dyups_result" == "0" ]; then
            echo "尝试了${{ inputs.dyups-try-count }}次，最终还是失败，我也没办法"
            exit 14
          fi